

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS})
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Findlibxdmcp.cmake")
# Global approach
set(libxdmcp_FOUND 1)
set(libxdmcp_VERSION "1.1.3")

find_package_handle_standard_args(libxdmcp REQUIRED_VARS
                                  libxdmcp_VERSION VERSION_VAR libxdmcp_VERSION)
mark_as_advanced(libxdmcp_FOUND libxdmcp_VERSION)


set(libxdmcp_INCLUDE_DIRS "/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/include")
set(libxdmcp_INCLUDE_DIR "/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/include")
set(libxdmcp_INCLUDES "/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/include")
set(libxdmcp_RES_DIRS )
set(libxdmcp_DEFINITIONS )
set(libxdmcp_LINKER_FLAGS_LIST
        $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>
        $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>
)
set(libxdmcp_COMPILE_DEFINITIONS )
set(libxdmcp_COMPILE_OPTIONS_LIST "" "")
set(libxdmcp_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(libxdmcp_LIBRARIES "") # Will be filled later
set(libxdmcp_LIBS "") # Same as libxdmcp_LIBRARIES
set(libxdmcp_SYSTEM_LIBS )
set(libxdmcp_FRAMEWORK_DIRS )
set(libxdmcp_FRAMEWORKS )
set(libxdmcp_FRAMEWORKS_FOUND "") # Will be filled later
set(libxdmcp_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(libxdmcp_FRAMEWORKS_FOUND "${libxdmcp_FRAMEWORKS}" "${libxdmcp_FRAMEWORK_DIRS}")

mark_as_advanced(libxdmcp_INCLUDE_DIRS
                 libxdmcp_INCLUDE_DIR
                 libxdmcp_INCLUDES
                 libxdmcp_DEFINITIONS
                 libxdmcp_LINKER_FLAGS_LIST
                 libxdmcp_COMPILE_DEFINITIONS
                 libxdmcp_COMPILE_OPTIONS_LIST
                 libxdmcp_LIBRARIES
                 libxdmcp_LIBS
                 libxdmcp_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to libxdmcp_LIBS and libxdmcp_LIBRARY_LIST
set(libxdmcp_LIBRARY_LIST Xdmcp)
set(libxdmcp_LIB_DIRS "/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_libxdmcp_DEPENDENCIES "${libxdmcp_FRAMEWORKS_FOUND} ${libxdmcp_SYSTEM_LIBS} xproto::xproto")

conan_package_library_targets("${libxdmcp_LIBRARY_LIST}"  # libraries
                              "${libxdmcp_LIB_DIRS}"      # package_libdir
                              "${_libxdmcp_DEPENDENCIES}"  # deps
                              libxdmcp_LIBRARIES            # out_libraries
                              libxdmcp_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "libxdmcp")                                      # package_name

set(libxdmcp_LIBS ${libxdmcp_LIBRARIES})

foreach(_FRAMEWORK ${libxdmcp_FRAMEWORKS_FOUND})
    list(APPEND libxdmcp_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND libxdmcp_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${libxdmcp_SYSTEM_LIBS})
    list(APPEND libxdmcp_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND libxdmcp_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(libxdmcp_LIBRARIES_TARGETS "${libxdmcp_LIBRARIES_TARGETS};xproto::xproto")
set(libxdmcp_LIBRARIES "${libxdmcp_LIBRARIES};xproto::xproto")

set(CMAKE_MODULE_PATH "/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/"
			"/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/lib/pkgconfig" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/"
			"/home/pierre/.conan/data/libxdmcp/1.1.3/bincrafters/stable/package/dc954523e21a8e6a1a0dc8ce3bccb63dbc0dc08d/lib/pkgconfig" ${CMAKE_PREFIX_PATH})

foreach(_BUILD_MODULE_PATH ${libxdmcp_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET libxdmcp::libxdmcp)
        add_library(libxdmcp::libxdmcp INTERFACE IMPORTED)
        if(libxdmcp_INCLUDE_DIRS)
            set_target_properties(libxdmcp::libxdmcp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                                  "${libxdmcp_INCLUDE_DIRS}")
        endif()
        set_property(TARGET libxdmcp::libxdmcp PROPERTY INTERFACE_LINK_LIBRARIES
                     "${libxdmcp_LIBRARIES_TARGETS};${libxdmcp_LINKER_FLAGS_LIST}")
        set_property(TARGET libxdmcp::libxdmcp PROPERTY INTERFACE_COMPILE_DEFINITIONS
                     ${libxdmcp_COMPILE_DEFINITIONS})
        set_property(TARGET libxdmcp::libxdmcp PROPERTY INTERFACE_COMPILE_OPTIONS
                     "${libxdmcp_COMPILE_OPTIONS_LIST}")
        
        # Library dependencies
        include(CMakeFindDependencyMacro)

        if(NOT xproto_FOUND)
            find_dependency(xproto REQUIRED)
        else()
            message(STATUS "Dependency xproto already found")
        endif()

    endif()
endif()
